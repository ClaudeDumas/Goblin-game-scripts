using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices.ComTypes;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using UnityEditor;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.iOS;

public class NavMeshing : MonoBehaviour
{   
    [SerializeField] List<GameObject> obstacles;
    [SerializeField] Vector3 StartPoint;
    [SerializeField] float xBound;
    [SerializeField] float zBound;
    [SerializeField] float upperYBound;
    [SerializeField] float lowerYBound;
    [SerializeField] float tileSize;
    [SerializeField] float stepSize;
    [SerializeField] float maxSlope;
    [SerializeField] float height;
    [SerializeField] float radius;
    [SerializeField] float jumpDistance;
    [SerializeField] bool addCubes;
    List<List<List<Point>>> pointRows = new List<List<List<Point>>>();
    List<Point> points = new List<Point>();
    void Start()
    {
        
        // To solve the issue of moving platforms, make a point's position actually relative to the hit's object.
        // Also make it so that when it moves it changes the connections based on what can jump to it.
        GameObject[] allObjects = UnityEngine.Object.FindObjectsOfType<GameObject>() ;
        foreach (GameObject obj in allObjects){
            if (obj.GetComponent<MeshFilter>()){
                // figure out... a code form of Delaunay Triangulation in 3d (ew) (spheres????)
                /* Guide to this foreach loop
                take vertices, for every instance of each vertex in a triangle set the other points as a connection to it.
                whatever connection has the largest slope apply 
                y + sin(degrees of angle between points)/tan(same degrees) + radius of capsule + height of capsule/2
                i dunno how sin/tan works but I figured it out in desmos :)))))
                */
                Vector3[] vertices = obj.GetComponent<MeshFilter>().mesh.vertices;
                int[] triangles = obj.GetComponent<MeshFilter>().mesh.triangles;
                List<float> slopes = new List<float>();
                float largestSlope = 0;
                Point newPoint = new Point();
                for (int i = 0; i < vertices.Length; i++){
                    print("lookin at vertices");
                    for (int j = 0; j < obj.GetComponent<MeshFilter>().mesh.triangles.Length; j++){
                        print("lookin at triangles");
                        if (i == triangles[j]){
                            switch (j % 3){
                                case 0:
                                    largestSlope = Mathf.Max(Mathf.Max(VectorAngle(vertices[i], vertices[triangles[j+1]]), VectorAngle(vertices[i], vertices[triangles[j+2]])), maxSlope);
                                    break;
                                case 1:
                                    largestSlope = Mathf.Max(Mathf.Max(VectorAngle(vertices[i], vertices[triangles[j-1]]), VectorAngle(vertices[i], vertices[triangles[j+1]])), maxSlope);
                                    break;
                                case 2:
                                    largestSlope = Mathf.Max(Mathf.Max(VectorAngle(vertices[i], vertices[triangles[j-1]]), VectorAngle(vertices[i], vertices[triangles[j-2]])), maxSlope);
                                    break;
                                default:
                                    print("Error in Navmeshing: mod 3 of triangles of a mesh didn't result in 0, 1, or 2. Unity documentation LIED.");
                                    break;
                            }
                        }
                    }
                    Vector3 newPointSpot = vertices[i] + new Vector3(0, (Mathf.Tan(maxSlope)/Mathf.Sin(maxSlope)) + radius + height/2, 0);
                    if (Physics.OverlapCapsule(newPointSpot + new Vector3(0, (height/2) - radius, 0), newPointSpot - new Vector3(0, (height/2) - radius, 0), radius).Length == 0){
                        if (largestSlope < maxSlope){
                            newPoint.set(newPointSpot, pointType.Standable);
                            Debug.DrawLine(newPointSpot, newPointSpot + new Vector3(0, 1, 0), Color.white, Mathf.Infinity);
                            points.Add(newPoint);
                        }
                        else{
                            newPoint.set(newPointSpot, pointType.noStand);
                            Debug.DrawLine(newPointSpot, newPointSpot + new Vector3(0, 1, 0), Color.red, Mathf.Infinity);
                            points.Add(newPoint);
                        }
                    }
                    largestSlope = 0;
                }
            }
        }
        /*
        for (int i = 0; i < pointRows.Count; i++)
        {
            for (int j = 0; j < pointRows[i].Count; j++)
            {
                for (int p = 0; p < pointRows[i][j].Count; p++)
                {
                    Point subjectPoint = pointRows[i][j][p];
                    // gets orthagonal points (like where the king can move in chess but not like the queen)
                    for (int k = 0; k < 9; k++)
                    {
                        // when at the lower and upper bounds of x and z on the navmesh, keeps this from accessing nonexistent points.
                        float pRow = Mathf.Clamp(i + 1 - ((k / 3) - (k / 3 % 1)), 0, pointRows.Count - 1);
                        float pCol = Mathf.Clamp(j + 1 - k % 3, 0, pointRows[i].Count - 1);
                        // for accessing everything in a column of points, because using raycastAll means there's columns of points to access.
                        for (int l = 0; l < pointRows[(int)pRow][(int)pCol].Count; l++){
                            Point connectPoint = pointRows[(int)pRow][(int)pCol][l];
                            if (connectPoint == subjectPoint){
                                continue;
                            }
                            if (connectPoint.getType() == pointType.noStand){
                                if (connectPoint.get().y < subjectPoint.get().y){
                                    subjectPoint.addConnection(connectPoint, navmeshConnectionType.Fall);
                                    Debug.DrawLine(subjectPoint.get(), connectPoint.get(), Color.red, Mathf.Infinity);
                                }
                            }
                            // degrees from the point the subject is connecting to and the subject.
                            // distance formula for x and z instead of x and y to find the x of the plane I'm checking the angle on.
                            // for the y of the plane it's just the y of both angles.
                            float deg = VectorAngle(connectPoint.get(), subjectPoint.get());
                            // using rHit instead of just hit because "height" is already taking up name space and it autocorrects to that
                            if (!Physics.CapsuleCast(subjectPoint.get() - new Vector3(0, height/2, 0), subjectPoint.get() + new Vector3(0, height/2, 0), radius, connectPoint.get() - subjectPoint.get(), (connectPoint.get() - subjectPoint.get()).magnitude) &&  deg < maxSlope)
                            {
                                
                                // checking to see if you can go down to the connection but not up from it, reference other comments for how the script checks for a connection like that.
                                Vector3 yMirror = subjectPoint.get() - new Vector3(0,subjectPoint.get().y,0) + new Vector3(0, connectPoint.get().y, 0);
                                // need to implement step
                                if (deg >= -maxSlope)
                                {
                                    subjectPoint.addConnection(connectPoint, navmeshConnectionType.Normal);
                                    Debug.DrawLine(subjectPoint.get(), connectPoint.get(), Color.white, Mathf.Infinity);
                                }
                                else
                                {
                                    subjectPoint.addConnection(connectPoint, navmeshConnectionType.Fall);
                                    //print("falling.");
                                    Debug.DrawLine(subjectPoint.get(), connectPoint.get(), Color.red, Mathf.Infinity);
                                }
                            }
                            else
                            {
                                // I take back the thing about steps being too small, I was wrong.

                                // y mirror is a variable that represents subjectpoint's position but at the same y as connectpoint's.
                                    // this is to get around steps that can be stepped up but not raycasted through
                                Vector3 yMirror = subjectPoint.get() - new Vector3(0,subjectPoint.get().y,0) + new Vector3(0, connectPoint.get().y, 0);
                                RaycastHit hit;
                                if (
                                    subjectPoint.get().y < connectPoint.get().y 
                                    && (connectPoint.get().y - subjectPoint.get().y) <= stepSize
                                    // First, cast the hitbox up to check if there's nothing in the way of going up.
                                    && !Physics.CapsuleCast(subjectPoint.get() + new Vector3(0, height/2, 0), subjectPoint.get() - new Vector3(0, height/2, 0), radius, yMirror - subjectPoint.get(), (yMirror - subjectPoint.get()).magnitude)
                                    // Second, cast the hitbox to the other point to see if there's nothing in the way of going forward.
                                    && !Physics.CapsuleCast(yMirror + new Vector3(0, height/2, 0), yMirror - new Vector3(0, height/2, 0), radius, connectPoint.get() - yMirror, (connectPoint.get() - yMirror).magnitude)
                                )
                                {
                                    // Third, check if there's anything in the way downward (This would mean it's on a slope)
                                    if (Physics.CapsuleCast(connectPoint.get() + new Vector3(0, height/2, 0), connectPoint.get() - new Vector3(0, height/2, 0), radius, Vector3.down, out hit, height/2)){
                                        // Fourth, get the surface's slope based on the normal and the point made.
                                        float deg2 = VectorAngle(hit.normal, Vector3.zero);
                                        if (deg2 > 0){
                                            deg2 -= 90;
                                        }
                                        else{
                                            deg2 += 90;
                                        }
                                        if (deg2 > -maxSlope && deg2 < maxSlope)
                                        {
                                            subjectPoint.addConnection(connectPoint, navmeshConnectionType.Step);
                                            Debug.DrawLine(subjectPoint.get(), connectPoint.get(), Color.green, Mathf.Infinity);
                                        }
                                    }
                                    else{
                                        // if not, it's just a step onto flat ground.
                                        subjectPoint.addConnection(connectPoint, navmeshConnectionType.Step);
                                        Debug.DrawLine(subjectPoint.get(), connectPoint.get(), Color.green, Mathf.Infinity);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        */
        
        // find a way to simplify the navmesh
    }
    public navmeshConnectionType findConnectionType(Point connectPoint, Point subjectPoint){
        if (connectPoint.getType() == pointType.noStand){
            if (connectPoint.get().y < subjectPoint.get().y){
                // subjectPoint.addConnection(connectPoint, navmeshConnectionType.Fall);
                Debug.DrawLine(subjectPoint.get(), connectPoint.get(), Color.red, Mathf.Infinity);
                return navmeshConnectionType.Fall;
            }
        }
        // degrees from the point the subject is connecting to and the subject.
        // distance formula for x and z instead of x and y to find the x of the plane I'm checking the angle on.
        // for the y of the plane it's just the y of both angles.
        float deg = VectorAngle(connectPoint.get(), subjectPoint.get());
        // using rHit instead of just hit because "height" is already taking up name space and it autocorrects to that
        if (!Physics.CapsuleCast(subjectPoint.get() - new Vector3(0, height/2, 0), subjectPoint.get() + new Vector3(0, height/2, 0), radius, connectPoint.get() - subjectPoint.get(), (connectPoint.get() - subjectPoint.get()).magnitude) &&  deg < maxSlope)
        {
            
            // checking to see if you can go down to the connection but not up from it, reference other comments for how the script checks for a connection like that.
            Vector3 yMirror = subjectPoint.get() - new Vector3(0,subjectPoint.get().y,0) + new Vector3(0, connectPoint.get().y, 0);
            // need to implement step
            if (deg >= -maxSlope)
            {
                // subjectPoint.addConnection(connectPoint, navmeshConnectionType.Normal);
                Debug.DrawLine(subjectPoint.get(), connectPoint.get(), Color.white, Mathf.Infinity);
                return navmeshConnectionType.Normal;
            }
            else
            {
                // subjectPoint.addConnection(connectPoint, navmeshConnectionType.Fall);
                //print("falling.");
                Debug.DrawLine(subjectPoint.get(), connectPoint.get(), Color.red, Mathf.Infinity);
                return navmeshConnectionType.Fall;
            }
        }
        else
        {
            // I take back the thing about steps being too small, I was wrong.

            // y mirror is a variable that represents subjectpoint's position but at the same y as connectpoint's.
                // this is to get around steps that can be stepped up but not raycasted through
            Vector3 yMirror = subjectPoint.get() - new Vector3(0,subjectPoint.get().y,0) + new Vector3(0, connectPoint.get().y, 0);
            RaycastHit hit;
            if (
                subjectPoint.get().y < connectPoint.get().y 
                && (connectPoint.get().y - subjectPoint.get().y) <= stepSize
                // First, cast the hitbox up to check if there's nothing in the way of going up.
                && !Physics.CapsuleCast(subjectPoint.get() + new Vector3(0, height/2, 0), subjectPoint.get() - new Vector3(0, height/2, 0), radius, yMirror - subjectPoint.get(), (yMirror - subjectPoint.get()).magnitude)
                // Second, cast the hitbox to the other point to see if there's nothing in the way of going forward.
                && !Physics.CapsuleCast(yMirror + new Vector3(0, height/2, 0), yMirror - new Vector3(0, height/2, 0), radius, connectPoint.get() - yMirror, (connectPoint.get() - yMirror).magnitude)
            )
            {
                // Third, check if there's anything in the way downward (This would mean it's on a slope)
                if (Physics.CapsuleCast(connectPoint.get() + new Vector3(0, height/2, 0), connectPoint.get() - new Vector3(0, height/2, 0), radius, Vector3.down, out hit, height/2)){
                    // Fourth, get the surface's slope based on the normal and the point made.
                    float deg2 = VectorAngle(hit.normal, Vector3.zero);
                    if (deg2 > 0){
                        deg2 -= 90;
                    }
                    else{
                        deg2 += 90;
                    }
                    if (deg2 > -maxSlope && deg2 < maxSlope)
                    {
                        // subjectPoint.addConnection(connectPoint, navmeshConnectionType.Step);
                        Debug.DrawLine(subjectPoint.get(), connectPoint.get(), Color.green, Mathf.Infinity);
                        return navmeshConnectionType.Step;
                    }
                }
                else{
                    // if not, it's just a step onto flat ground.
                    subjectPoint.addConnection(connectPoint, navmeshConnectionType.Step);
                    Debug.DrawLine(subjectPoint.get(), connectPoint.get(), Color.green, Mathf.Infinity);
                }
            }
        }
        print("Connection doesn't exist.");
        return navmeshConnectionType.None;
    }
    public float VectorAngle(Vector3 to, Vector3 from){
        return Mathf.Atan2(to.y - from.y, Mathf.Sqrt(Mathf.Pow(to.x - from.x, 2) + Mathf.Pow(to.z - from.z, 2))) * Mathf.Rad2Deg;
    }
}
public class Point
{
    List<PointConnection> ConnectedPoints = new List<PointConnection>();
    private Vector3 Place;
    private pointType type;

    public void set(Vector3 spot, pointType pT)
    {
        Place = spot;
        type = pT;
    }
    public Vector3 get()
    {
        return Place;
    }
    public pointType getType(){
        return type;
    }
    // the f stands for friend :)
    public void addConnection(Point fPoint, navmeshConnectionType type)
    {
        PointConnection newPointConnection = new PointConnection(type, fPoint);
        ConnectedPoints.Add(newPointConnection);
    }
    public List<PointConnection> getConnections()
    {
        return ConnectedPoints;
    }
}
public enum pointType{
    Standable,
    noStand
}
// type of point connection
public enum navmeshConnectionType
{
    Fall,
    Normal,
    Step,
    None
}
public class PointConnection
{
    public navmeshConnectionType type;
    public Point point;
    public PointConnection(navmeshConnectionType t, Point p){
        type = t;
        point = p;
    }
    public void set(navmeshConnectionType t, Point p)
    {
        type = t;
        point = p;
    }
    public Vector3 get()
    {
        return point.get();
    }
    public navmeshConnectionType getType()
    {
        return type;
    }
}
